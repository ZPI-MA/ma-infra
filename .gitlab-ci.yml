stages:
  - init
  - validate
  - plan
  - apply
  - destroy

variables:
  TF_VAR_hcp_client_id: $HCP_CLIENT_ID
  TF_VAR_hcp_client_secret: $HCP_CLIENT_SECRET
  TF_ROOT: ${CI_PROJECT_DIR}/infrastructure

image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

.auto_job:
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"  # Only run on main branch
      when: always
    - if: $CI_COMMIT_REF_NAME == "tmp_dev"  # TESTING
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never  # Prevention of running on merge requests
    - when: never  # Don't run on any other branch

.manual_job:
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"  # Only run on main branch
      when: manual
    - if: $CI_COMMIT_REF_NAME == "tmp_dev"  # TESTING
      when: manual
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never  # Prevention of running on merge requests
    - when: never  # Don't run on any other branch

before_script:
  - cd ${TF_ROOT}
  - rm -rf .terraform
  - terraform --version
  - terraform init

validate:
  extends: .auto_job
  stage: validate
  script:
    - terraform validate

plan:
  extends: .auto_job
  stage: plan
  dependencies:
    - validate
  script:
    - terraform plan -out=tfplan
  artifacts:
    paths:
      - ${TF_ROOT}/tfplan
      - ${TF_ROOT}/**/*.sh
      - ${TF_ROOT}/**/*.tpl

apply:
  extends: .auto_job
  stage: apply
  dependencies:
    - plan
  script:
    - terraform apply -auto-approve tfplan
  artifacts:
    paths:
      - ${TF_ROOT}/terraform.tfstate

destroy:
  extends: .manual_job
  stage: destroy
  dependencies:
    - apply
  script:
    - terraform destroy -auto-approve
  when: manual
  allow_failure: false
